{"version":3,"sources":["../../server/test/Movie.js"],"names":["process","env","NODE_ENV","mongoose","require","Movie","chai","chaiHttp","server","should","use","describe","beforeEach","done","remove","err","it","request","get","end","res","have","status","body","be","a","length","eql","movie","title","author","writer","year","post","send","property","errors","time","nmovie","save","id","put","delete","result"],"mappings":"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","file":"Movie.js","sourcesContent":["//During the test the env variable is set to test\nprocess.env.NODE_ENV = 'test';\n\nlet mongoose = require(\"mongoose\");\nlet Movie = require('./../model/movie');\n\n//Require the dev-dependencies\nlet chai = require('chai');\nlet chaiHttp = require('chai-http');\nlet server = require('./../server');\nlet should = chai.should();\n\n\nchai.use(chaiHttp);\n\ndescribe('Movie', () => {\n    beforeEach((done) => {\n        Movie.remove({}, (err) => { \n           done();           \n        });        \n    });\n  describe('/GET movie', () => {\n      it('it should GET all the movies', (done) => {\n            chai.request(server)\n            .get('/api/movie')\n            .end((err, res) => {\n                  res.should.have.status(200);\n                  res.body.should.be.a('array');\n                  res.body.length.should.be.eql(0);\n              done();\n            });\n      });\n  });\n  describe('/POST movie', () => {\n      it('it should not POST a movie without time field', (done) => {\n          let movie = {\n              title: \"The Lord of the Rings\",\n              author: \"J.R.R. Tolkien\",\n              writer: \"J.D.D \",\n              year: 1954\n          }\n            chai.request(server)\n            .post('/api/movie')\n            .send(movie)\n            .end((err, res) => {\n                  res.should.have.status(200);\n                  res.body.should.be.a('object');\n                  res.body.should.have.property('errors');\n                  res.body.errors.should.have.property('time');\n                  res.body.errors.time.should.have.property('kind').eql('required');\n              done();\n            });\n      });\n      it('it should POST a movie ', (done) => {\n          let movie = {\n              title: \"The Lord of the Rings\",\n              author: \"J.R.R. Tolkien\",\n              writer: \"J.R.R. Tolkien\",\n              year: 1954,\n              time: 1170\n          }\n            chai.request(server)\n            .post('/api/movie')\n            .send(movie)\n            .end((err, res) => {\n                  res.should.have.status(200);\n                  res.body.should.be.a('object');\n                  res.body.should.have.property('message').eql('Movie successfully added!');\n                  res.body.movie.should.have.property('title');\n                  res.body.movie.should.have.property('author');\n                  res.body.movie.should.have.property('writer');\n                  res.body.movie.should.have.property('time');\n                  res.body.movie.should.have.property('year');\n              done();\n            });\n      });\n  });\n  describe('/GET/:id movie', () => {\n      it('it should GET a movie by the given id', (done) => {\n          let nmovie = {\n              title: \"The Lord of the Rings\",\n              author: \"J.R.R. Tolkien\",\n              writer: \"J.R.R. Tolkien\",\n              year: 1954,\n              time: 1170\n          };\n\n          let movie = new Movie(nmovie);\n          movie.save((err, movie) => {\n              chai.request(server)\n            .get('/api/movie/' + movie.id)\n            .send(movie)\n            .end((err, res) => {\n                  res.should.have.status(200);\n                  res.body.should.be.a('object');\n                  res.body.should.have.property('title');\n                  res.body.should.have.property('author');\n                  res.body.should.have.property('writer');\n                  res.body.should.have.property('time');\n                  res.body.should.have.property('year');\n                  res.body.should.have.property('_id').eql(movie.id);\n              done();\n            });\n          });\n\n      });\n  });\n  describe('/PUT/:id movie', () => {\n      it('it should UPDATE a movie given the id', (done) => {\n          let nmovie = {\n              title: \"The Lord of the Rings\",\n              author: \"J.R.R. Tolkien\",\n              writer: \"J.R.R. Tolkien\",\n              year: 1954,\n              time: 1170\n          };\n          let movie = new Movie(nmovie)\n          movie.save((err, movie) => {\n                chai.request(server)\n                .put('/api/movie/' + movie.id)\n                .send({title: \"The Chronicles of Narnia\", author: \"C.S. Lewis\", year: 1950, time: 778})\n                .end((err, res) => {\n                      res.should.have.status(200);\n                      res.body.should.be.a('object');\n                      res.body.should.have.property('message').eql('Movie updated!');\n                      res.body.movie.should.have.property('year').eql(1950);\n                  done();\n                });\n          });\n      });\n  });\n /*\n  * Test the /DELETE/:id route\n  */\n  describe('/DELETE/:id movie', () => {\n      it('it should DELETE a movie given the id', (done) => {\n          let nmovie = {\n              title: \"The Lord of the Rings\",\n              author: \"J.R.R. Tolkien\",\n              writer: \"J.R.R. Tolkien\",\n              year: 1954,\n              time: 1170\n          };\n\n          let movie = new Movie(nmovie)\n          movie.save((err, movie) => {\n                chai.request(server)\n                .delete('/api/movie/' + movie.id)\n                .end((err, res) => {\n                      res.should.have.status(200);\n                      res.body.should.be.a('object');\n                      res.body.should.have.property('message').eql('Movie successfully deleted!');\n                      res.body.result.should.have.property('ok').eql(1);\n                      res.body.result.should.have.property('n').eql(1);\n                  done();\n                });\n          });\n      });\n  });\n});"]}