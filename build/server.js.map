{"version":3,"sources":["../server/server.js"],"names":["express","require","app","morgan","bodyParser","fs","config","port","get","strEnv","process","env","NODE_ENV","dbHost","mongoose","path","timeout","indexRoute","use","json","urlencoded","extended","text","type","haltOnTimedout","req","res","next","timedout","options","server","socketOptions","keepAlive","connectTimeoutMS","replset","connect","db","connection","on","console","error","bind","accessLogStream","createWriteStream","join","__dirname","flags","listen","log","module","exports"],"mappings":";;AAAA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,MAAMF,SAAV;AACA,IAAIG,SAASF,QAAQ,QAAR,CAAb;AACA,IAAIG,aAAaH,QAAQ,aAAR,CAAjB;AACA,IAAII,KAAKJ,QAAQ,IAAR,CAAT;AACA,IAAIK,SAASL,QAAQ,QAAR,CAAb;AACA,IAAIM,OAAOD,OAAOE,GAAP,CAAW,aAAX,KAA6B,IAAxC;AACA,IAAIC,SAASC,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,KAArC;AACA,IAAIC,SAASP,OAAOE,GAAP,CAAW,eAAX,CAAb;AACA,IAAIM,WAAWb,QAAQ,UAAR,CAAf;AACA,IAAIc,OAAOd,QAAQ,MAAR,CAAX;;AAEA,IAAIe,UAAUf,QAAQ,iBAAR,CAAd,C,CAA0C;AAC1C,IAAIgB,aAAahB,QAAQ,sBAAR,CAAjB;AACA;AACAC,IAAIgB,GAAJ,CAAQd,WAAWe,IAAX,EAAR;AACAjB,IAAIgB,GAAJ,CAAQd,WAAWgB,UAAX,CAAsB,EAACC,UAAU,IAAX,EAAtB,CAAR;AACAnB,IAAIgB,GAAJ,CAAQd,WAAWkB,IAAX,EAAR;AACApB,IAAIgB,GAAJ,CAAQd,WAAWe,IAAX,CAAgB,EAAEI,MAAM,kBAAR,EAAhB,CAAR;;AAEArB,IAAIgB,GAAJ,CAAQF,QAAQ,MAAR,CAAR;AACAd,IAAIgB,GAAJ,CAAQM,cAAR;;AAEA,SAASA,cAAT,CAAwBC,GAAxB,EAA6BC,GAA7B,EAAkCC,IAAlC,EAAuC;AACrC,QAAI,CAACF,IAAIG,QAAT,EAAmBD;AACpB;;AAGD;AACA,IAAIE,UAAU;AACEC,YAAQ,EAAEC,eAAe,EAAEC,WAAW,CAAb,EAAgBC,kBAAkB,KAAlC,EAAjB,EADV;AAEEC,aAAS,EAAEH,eAAe,EAAEC,WAAW,CAAb,EAAgBC,kBAAmB,KAAnC,EAAjB;AAFX,CAAd;;AAKA;AACA,IAAGpB,MAAH,EAAW;AACPC,aAASqB,OAAT,CAAiBtB,MAAjB,EAAyBgB,OAAzB;AACA,QAAIO,KAAKtB,SAASuB,UAAlB;AACAD,OAAGE,EAAH,CAAM,OAAN,EAAeC,QAAQC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,EAA4B,mBAA5B,CAAf;AACH;;AAGD;AACA,IAAG9B,WAAW,MAAd,EAAsB;AAClB;AACC,QAAIiC,kBAAkBrC,GAAGsC,iBAAH,CAAqB5B,KAAK6B,IAAL,CAAUC,SAAV,EAAsB,mBAAtB,CAArB,EAAiE,EAACC,OAAO,GAAR,EAAjE,CAAtB;AACA5C,QAAIgB,GAAJ,CAAQf,OAAO,UAAP,EAAoB,EAAC,UAAUuC,eAAX,EAApB,CAAR;AACJ;;AAEDxC,IAAIgB,GAAJ,CAAQ,MAAR,EAAgBD,UAAhB;;AAEAf,IAAI6C,MAAJ,CAAWxC,IAAX;AACAgC,QAAQS,GAAR,CAAY,uBAAuBzC,IAAvB,GAA8B,YAA9B,GAA6CE,MAAzD;;AAEAwC,OAAOC,OAAP,GAAiBhD,GAAjB,C,CAAsB","file":"server.js","sourcesContent":["let express = require('express');\nlet app = express();\nlet morgan = require('morgan');\nlet bodyParser = require('body-parser');\nlet fs = require('fs');\nlet config = require(\"config\");\nlet port = config.get(\"server.port\") || 3005;\nlet strEnv = process.env.NODE_ENV || 'dev';\nlet dbHost = config.get(\"dbConfig.host\");\nlet mongoose = require('mongoose');\nlet path = require('path');\n\nvar timeout = require('connect-timeout'); //express v4\nlet indexRoute = require('./routes/indexRoutes');\n//parse application/json and look for raw text                                        \napp.use(bodyParser.json());                                     \napp.use(bodyParser.urlencoded({extended: true}));               \napp.use(bodyParser.text());                                    \napp.use(bodyParser.json({ type: 'application/json'}));  \n\napp.use(timeout(120000));\napp.use(haltOnTimedout);\n\nfunction haltOnTimedout(req, res, next){\n  if (!req.timedout) next();\n}\n\n\n//db options\nlet options = { \n                server: { socketOptions: { keepAlive: 1, connectTimeoutMS: 30000 } }, \n                replset: { socketOptions: { keepAlive: 1, connectTimeoutMS : 30000 } } \n              }; \n\n//db connection only if config contain value \nif(dbHost) {\n    mongoose.connect(dbHost, options);\n    let db = mongoose.connection;\n    db.on('error', console.error.bind(console, 'connection error:'));\n}      \n\n\n//don't show the log when it is test\nif(strEnv !== 'test') {\n    //use morgan to log at command line\n     var accessLogStream = fs.createWriteStream(path.join(__dirname , '../log/access.log'), {flags: 'a'})\n     app.use(morgan('combined',  {\"stream\": accessLogStream}));\n}\n\napp.use(\"/api\", indexRoute);\n\napp.listen(port);\nconsole.log(\"Listening on port \" + port + \" with env \" + strEnv);\n\nmodule.exports = app; // for testing"]}