{"version":3,"sources":["../../server/controller/CrawlController.js"],"names":["Crawler","require","request","cheerio","crawler","configure","maxRequestsPerSecond","arrUrl","arrReport","getCrawlPage","req","res","strUrl","query","url","response","message","status","json","crawl","success","page","$","load","content","each","item","a","attribs","href","undefined","includes","push","parent","failure","finished","crawledUrls","getUnique","pages","images","social","send","arrInput","filter","v","i","indexOf","module","exports"],"mappings":";;AACA,IAAIA,UAAUC,QAAQ,YAAR,CAAd;AACA,IAAIC,UAAUD,QAAQ,SAAR,CAAd;AACA,IAAIE,UAAUF,QAAQ,SAAR,CAAd;AACA;;;AAGA,IAAIG,UAAU,IAAIJ,OAAJ,GAAcK,SAAd,CAAwB,EAACC,sBAAsB,CAAvB,EAAxB,CAAd;AACA,IAAIC,SAAS,EAAb;AACA,IAAIC,YAAY,EAAhB;AACAA,UAAU,QAAV,IAAsB,EAAtB;AACAA,UAAU,OAAV,IAAqB,EAArB;AACAA,UAAU,QAAV,IAAsB,EAAtB;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC5B,QAAIC,eAAJ;AACA,QAAGF,OAAOA,IAAIG,KAAX,IAAoB,CAACH,IAAIG,KAAJ,CAAUC,GAAlC,EAAuC;AACnC,YAAIC,WAAW,EAACC,SAAS,8BAAV,EAAf;AACAL,YAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,QAArB;AACA;AACH,KAJD,MAIO;AACHH,iBAASF,IAAIG,KAAJ,CAAUC,GAAnB;AACA;AACH;AACDV,YAAQe,KAAR,CAAc;AACVL,aAAKF,MADK;AAEVQ,iBAAS,iBAASC,IAAT,EAAe;AACnB,gBAAIC,IAAInB,QAAQoB,IAAR,CAAaF,KAAKG,OAAlB,CAAR;;AAEAF,cAAE,GAAF,EAAOG,IAAP,CAAY,UAASC,IAAT,EAAcC,CAAd,EAAiB;AAC1B,oBAAIb,MAAMa,EAAEC,OAAF,CAAUC,IAApB;AACA,oBAAGf,OAAOgB,SAAV,EAAqB;AACrB,wBAAGhB,OAAOA,IAAIiB,QAAJ,CAAa,UAAb,CAAP,IAAmCjB,IAAIiB,QAAJ,CAAa,SAAb,CAAnC,IAA8DjB,IAAIiB,QAAJ,CAAa,UAAb,CAAjE,EAA2F;AACvFvB,kCAAU,QAAV,EAAoBwB,IAApB,CAAyBlB,GAAzB;AACH,qBAFD,MAEO;AACHN,kCAAU,OAAV,EAAmBwB,IAAnB,CAAwBlB,GAAxB;AACH;AACA;AACD;AACA;AACH,aAXA;AAYDQ,cAAE,GAAF,EAAOG,IAAP,CAAY,UAASC,IAAT,EAAcC,CAAd,EAAiB;AACzB;AACA,oBAAIb,MAAMa,EAAEM,MAAF,CAASL,OAAT,CAAiBC,IAA3B;AACA,oBAAGf,OAAOgB,SAAV,EAAqB;AACrBtB,8BAAU,QAAV,EAAoBwB,IAApB,CAAyBlB,GAAzB;AACA;AACA;AACC;AACJ,aARD;AASAP,mBAAOyB,IAAP,CAAYX,KAAKP,GAAjB;AACH,SA3BS;AA4BVoB,iBAAS,iBAASb,IAAT,EAAe,CACvB,CA7BS;AA8BVc,kBAAU,kBAASC,WAAT,EAAsB;AAC5B;AACA,gBAAIrB,WAAW,EAACC,SAAS,aAAV,EAAyB,WAAYqB,UAAU9B,MAAV,CAArC,EAAwD,cAAa8B,UAAU7B,UAAU8B,KAApB,CAArE,EAAmG,SAASD,UAAU7B,UAAU+B,MAApB,CAA5G;AACK,0BAAWF,UAAU7B,UAAUgC,MAApB,CADhB,EAAf;AAEA;AACA7B,gBAAI8B,IAAJ,CAAS1B,QAAT;AACH;AApCS,KAAd;AAsCH;;AAGD,SAASsB,SAAT,CAAmBK,QAAnB,EAA6B;AACzB,WAAOA,SAASC,MAAT,CAAgB,UAACC,CAAD,EAAIC,CAAJ,EAAOlB,CAAP;AAAA,eAAaA,EAAEmB,OAAF,CAAUF,CAAV,MAAiBC,CAA9B;AAAA,KAAhB,CAAP;AACH;AACD;AACAE,OAAOC,OAAP,GAAiB,EAAEvC,0BAAF,EAAjB","file":"CrawlController.js","sourcesContent":["\nvar Crawler = require(\"js-crawler\");\nvar request = require('request');\nvar cheerio = require('cheerio');\n/*\n * GET /crawl route.\n */\nvar crawler = new Crawler().configure({maxRequestsPerSecond: 2});\nlet arrUrl = [];\nlet arrReport = [];\narrReport[\"images\"] = [];\narrReport[\"pages\"] = [];\narrReport[\"social\"] = [];\n\nfunction getCrawlPage(req, res) {\n    let strUrl;\n    if(req && req.query && !req.query.url) {\n        let response = {message: \"Query string url is required\"};\n        res.status(200).json(response);\n        return;\n    } else {\n        strUrl = req.query.url;\n        //Validation code here\n    }\n    crawler.crawl({\n        url: strUrl,\n        success: function(page) {\n             var $ = cheerio.load(page.content);\n            \n             $(\"a\").each(function(item,a) {\n                let url = a.attribs.href;\n                if(url != undefined) {\n                if(url && url.includes(\"facebook\") || url.includes(\"twitter\") || url.includes(\"linkedin\")) {\n                    arrReport[\"social\"].push(url);\n                } else {\n                    arrReport[\"pages\"].push(url);\n                }\n                }\n                //console.log(\"Links = \" + url);\n                //c.queue(url);\n            });\n            $(\"i\").each(function(item,a) {\n                //console.log(\"inside\", $(this));\n                let url = a.parent.attribs.href;\n                if(url != undefined) {\n                arrReport[\"images\"].push(url);\n                //console.log(\" Img =  \" + url);\n                //c.queue(url);\n                }\n            });\n            arrUrl.push(page.url);\n        },\n        failure: function(page) {\n        },\n        finished: function(crawledUrls) {\n            //console.log(arrUrl);\n            let response = {message: \"Crawl done.\", \"allUrls\" : getUnique(arrUrl), \"uniquePags\":getUnique(arrReport.pages) ,  \"image\": getUnique(arrReport.images)\n                              , \"social\" : getUnique(arrReport.social)};\n            //console.log(\"Result \" + response);\n            res.send(response);\n        }\n    });\n}\n\n\nfunction getUnique(arrInput) {\n    return arrInput.filter((v, i, a) => a.indexOf(v) === i);\n}\n//export all the functions\nmodule.exports = { getCrawlPage};"]}